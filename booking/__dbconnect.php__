<?PHP
//---------------------------------------------------------------------------------------------------------------
// THIS FILE MUST BE RENAMED TO dbconnect.php AND YOU MUST UPDATE WITH CORRECT DB CREDENTIALS BELOW
// THIS FILE MUST BE RENAMED TO dbconnect.php AND YOU MUST UPDATE WITH CORRECT DB CREDENTIALS BELOW
// THIS FILE MUST BE RENAMED TO dbconnect.php AND YOU MUST UPDATE WITH CORRECT DB CREDENTIALS BELOW
//---------------------------------------------------------------------------------------------------------------
define("DB_USER", "USER FROM CONSTRUCTION COURSE");
define("DB_PASSWORD", "PASSWORD FROM CONSTRUCTION COURSE");

define("DB_HOST", "localhost");
define("DB_NAME", "BookingSystem");
//---------------------------------------------------------------------------------------------------------------

/**
 * @var PDO
 * @global
 */
$pdo = null;

/**
 * Allows us to pass national characters - & is replaced with %
 * @param string $str
 * @return string
 */
function presenthtml($str)
{
	return str_replace("&", "%", $str);
}

/**
 * Allows us to pass posts even if array position does not exist
 * 
 * Will return NULL when param does not exits
 * @param string $param
 * @return string|null
 */
function getpost($param)
{
	if (isset($_POST[$param])) {
		$ret = $_POST[$param];
	} else {
		$ret = NULL;
	}
	return $ret;
}

$missingParams = [];

/**
 * Allows us to pass posts even if array position does not exist
 * 
 * Will return NULL when param does not exits OR is empty
 * @param string $param
 * @param ?boolean $required if the parameter needs to be present
 * @return string|null
 */
function getpostAJAX($param, $required = false)
{
	global $missingParams;
	if (isset($_POST[$param])) {
		if ($_POST[$param] === "0") {
			$ret = "0";
		} else if (empty($_POST[$param])) {
			$ret = NULL;
			if ($required) {
				$missingParams[] = $param;
			}
		} else {
			$ret = htmlentities(urldecode($_POST[$param]));
		}
	} else {
		$ret = NULL;
		if ($required) {
			$missingParams[] = $param;
		}
	}
	return $ret;
}

/**
 * If any required params are missing, displays a nicely formatted error and exits
 */
function reportMissingParams()
{
	global $missingParams;
	if (!empty($missingParams)) {
		$errmsg = "Missing Params: (" . implode("/", $missingParams) . ")";
		header("HTTP/1.0 400 " . $errmsg, true, 400);
		echo $errmsg;
	}
}

/**
 * Displays a nicely formatted error and exits
 * @param string $errmsg
 * @return never
 */
function err($errmsg)
{
	header("HTTP/1.0 500 Internal server error:" . $errmsg, true, 500);
	echo $errmsg;
	exit;
}

/**
 * Makes database connection
 * 
 * This is called immediately
 * @private 
 * @return void
 */
function dbConnect()
{

	$printHeaderFunction = 0;

	// send header info to err()?
	if ($printHeaderFunction) {
		$hdr = 'Database Connect Error';
	} else {
		$hdr = '';
	}

	global $pdo;
	try {
		$pdo = new PDO("mysql:dbname=" . DB_NAME . ";host=" . DB_HOST, DB_USER, DB_PASSWORD);
		$pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
	} catch (PDOException $e) {
		err("Error!: " . $e->getMessage() . "<br/>");
		die();
	}

}

dbConnect();
if (empty($_POST)) {
	$_POST = json_decode(file_get_contents('php://input', false), true);
}
?>